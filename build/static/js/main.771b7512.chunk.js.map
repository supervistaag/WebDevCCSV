{"version":3,"sources":["InputField.js","SearchButton.js","ShowResults.js","SwitchStyle.js","App.js","serviceWorker.js","index.js"],"names":["InputFields","this","props","inputField","onChange","name","darkMode","label","className","TextField","id","type","value","e","target","variant","color","inputProps","style","InputLabelProps","React","Component","SearchButton","onSearch","Button","onClick","ShowResults","results","map","product","i","key","maxSphere","minSphere","maxCylinder","minCylinder","maxAddition","minAddition","SwitchStyle","toggledarkMode","FormGroup","FormControlLabel","control","Switch","checked","Typography","theme","createMuiTheme","palette","primary","main","secondary","typography","fontFamily","join","App","state","inputSphere","findResults","setState","result","data","console","log","ThemeProvider","Grid","InputField","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.771b7512.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\n\nclass InputFields extends React.Component{\n    render(){\n        const {inputField, onChange, name, darkMode, label} = this.props\n        return(\n            <div className={darkMode?'inputWrap':'inputWrapLight'}>\n                <TextField \n                id={name}\n                type=\"number\"\n                value={inputField}\n                onChange={(e)=>onChange(name,e.target.value)}\n                variant='outlined'\n                label={label}\n                color={darkMode && 'secondary'}\n                inputProps={{\n                    style:{color: darkMode && \"#02e2f2\"}\n                }}\n                InputLabelProps={{\n                    style:{color: darkMode && \"#02e2f2\"}\n                }}              \n                />\n            </div>\n        )\n    }\n}\n\nexport default InputFields","import React from 'react';\nimport Button from \"@material-ui/core/Button\";\n\nclass SearchButton extends React.Component{\n    render(){\n        const {onSearch, darkMode}=this.props\n        return(\n            <Button\n            variant={'contained'}\n            onClick={onSearch}\n            color={darkMode?'secondary':'primary'}\n            >\n                Search\n            </Button>\n        )\n    }\n}\n\nexport default SearchButton","import React from 'react';\n\nclass ShowResults extends React.Component{\n    render(){\n        const {results, darkMode} = this.props\n        return(\n            <ol>\n                {results.map(\n                    (product,i)=>{\n                    return <li key={i} className={darkMode?'liDark':'liLight'}>{product.name} \n                        <br/>Sphere: {product.maxSphere} to {product.minSphere}\n                        <br/>Cylinder: {product.maxCylinder} to {product.minCylinder}\n                        <br/>Addition: {product.maxAddition} to {product.minAddition}\n                        </li>\n                    }\n                )}\n            </ol>\n        )\n    }\n}\n\nexport default ShowResults","import React, {Component} from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Typography from '@material-ui/core/Typography';\n\nclass SwitchStyle extends Component {\n    render(){\n        const { darkMode, toggledarkMode } = this.props;\n          return (\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={darkMode}\n                    onChange={toggledarkMode}\n                    name=\"checked\"\n                    color=\"secondary\"\n                  />\n                }\n                label={<Typography color={darkMode ? 'secondary': ''}>{darkMode?\"Dark mode\":\"Light mode\"}</Typography>}\n              />\n            </FormGroup>\n          );\n    }\n}\n\nexport default SwitchStyle;","import React from 'react';\nimport result from './data.json'\nimport InputField from './InputField'\nimport SearchButton from './SearchButton'\nimport ShowResults from './ShowResults'\nimport Grid from '@material-ui/core/Grid'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport SwitchStyle from './SwitchStyle';\n\nconst theme = createMuiTheme({\n  palette:{\n    primary: {\n      main:'#007BA7',\n    },\n    secondary:{\n      main:'#02e2f2'\n    }\n  },\n  typography: {\n    fontFamily: [\n      'Nunito',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif'\n    ].join(','),\n  }\n});\n\nclass App extends React.Component {\n  state={\n    inputSphere:0,\n    results:[],\n    darkMode: false,\n  }\n  findResults=(inputSphere)=>{\n    this.setState({results:result.data})\n  }\n  onSearch=()=>{\n    console.log(\"to be done\")\n  }\n  onChange=(key,value)=>{\n    this.setState({[key]:value})\n  }\n  toggledarkMode=()=>{\n    this.setState({\n      darkMode: !this.state.darkMode\n    })\n  }\n  render (){\n    const { darkMode, inputSphere, results } = this.state;\n    return(\n      <ThemeProvider theme={theme}>\n        <div className={darkMode?\"AppDark\":\"AppLight\"}>\n          <Grid className='searchField'>\n          <InputField\n            inputField={inputSphere}\n            name=\"inputSphere\"\n            label=\"Sphere\"\n            onChange={this.onChange}\n          />\n          <SearchButton\n            onSearch={this.onSearch}\n          />\n          </Grid>\n          <Grid className={darkMode?'serchResult':'serchResultLight'}>\n          <ShowResults\n            results={results}\n          />\n          </Grid>\n          <SwitchStyle\n            darkMode={this.state.darkMode}\n            toggledarkMode={this.toggledarkMode}\n          />\n        </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}